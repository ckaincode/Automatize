import numpy as np
import matplotlib.pyplot as plt

def remove_noise(signal, cutoff_frequency):
    # Calcular a Transformada de Fourier do sinal
    spectrum = np.fft.fft(signal)

    # Definir o número de amostras
    n = len(signal)

    # Criar o vetor de frequências
    frequencies = np.fft.fftfreq(n)

    # Encontrar o índice da frequência de corte
    index_cutoff = np.argmax(frequencies > cutoff_frequency)

    # Zerar as componentes de frequência acima da frequência de corte
    spectrum[index_cutoff:-index_cutoff] = 0

    # Calcular a Transformada Inversa de Fourier do sinal filtrado
    filtered_signal = np.fft.ifft(spectrum).real

    return filtered_signal

# Gerar um sinal com ruído
np.random.seed(0)
t = np.linspace(0, 2 * np.pi, 128)
signal = np.sin(t)
noise = np.random.randn(128) * 0.2
noisy_signal = signal + noise

# Remover o ruído
filtered_signal = remove_noise(noisy_signal, cutoff_frequency=0.5)

# Plotar o sinal com ruído e o sinal filtrado
plt.plot(t, noisy_signal, label='Noisy signal')
plt.plot(t, filtered_signal, label='Filtered signal')
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.legend()
plt.show()
